plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.revfactory'
version = '0.1.1'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jsoup:jsoup:1.15.3'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'sub-link-extractor'
                description = 'sub-link-extractor'
                url = 'https://github.com/revfactory/sub-link-extractor'
                licenses {
                    license {
                        name = 'Apache 2.0 License'
                        url = 'https://opensource.org/license/apache-2-0/'
                    }
                }
                developers {
                    developer {
                        id = 'revfactory'
                        name = 'revfactory'
                        email = 'revfactory@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/revfactory/sub-link-extractor.git'
                    developerConnection = 'scm:git:ssh://github.com/revfactory/sub-link-extractor.git'
                    url = 'https://github.com/revfactory/sub-link-extractor'
                }
            }
        }
    }
    repositories {
        maven {
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username project.findProperty("sonatypeUsername") ?: System.getenv("SONATYPE_USERNAME")
                password project.findProperty("sonatypePassword") ?: System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    useGpgCmd()
    if (project.hasProperty("signing.secretKeyRingFile")) {
        useInMemoryPgpKeys(findProperty("signing.keyId"), findProperty("signing.secretKeyRingFile"), findProperty("signing.password"))
    }
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    enabled = !project.version.endsWith('SNAPSHOT')
}
